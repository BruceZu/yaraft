// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raftpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yaraft {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snapshot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snapshot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfChange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raftpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_raftpb_2eproto() {
  protobuf_AddDesc_raftpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raftpb.proto");
  GOOGLE_CHECK(file != NULL);
  Entry_descriptor_ = file->message_type(0);
  static const int Entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, data_),
  };
  Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entry_descriptor_,
      Entry::default_instance_,
      Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_[0]),
      -1,
      -1,
      sizeof(Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _internal_metadata_),
      -1);
  SnapshotMetadata_descriptor_ = file->message_type(1);
  static const int SnapshotMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, conf_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, term_),
  };
  SnapshotMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapshotMetadata_descriptor_,
      SnapshotMetadata::default_instance_,
      SnapshotMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(SnapshotMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMetadata, _internal_metadata_),
      -1);
  Snapshot_descriptor_ = file->message_type(2);
  static const int Snapshot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, metadata_),
  };
  Snapshot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Snapshot_descriptor_,
      Snapshot::default_instance_,
      Snapshot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, _has_bits_[0]),
      -1,
      -1,
      sizeof(Snapshot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snapshot, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(3);
  static const int Message_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, logterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, reject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, rejecthint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, context_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  HardState_descriptor_ = file->message_type(4);
  static const int HardState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, commit_),
  };
  HardState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HardState_descriptor_,
      HardState::default_instance_,
      HardState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, _has_bits_[0]),
      -1,
      -1,
      sizeof(HardState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardState, _internal_metadata_),
      -1);
  ConfState_descriptor_ = file->message_type(5);
  static const int ConfState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfState, nodes_),
  };
  ConfState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfState_descriptor_,
      ConfState::default_instance_,
      ConfState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfState, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfState, _internal_metadata_),
      -1);
  ConfChange_descriptor_ = file->message_type(6);
  static const int ConfChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, context_),
  };
  ConfChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfChange_descriptor_,
      ConfChange::default_instance_,
      ConfChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChange, _internal_metadata_),
      -1);
  EntryType_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
  ConfChangeType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raftpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapshotMetadata_descriptor_, &SnapshotMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Snapshot_descriptor_, &Snapshot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HardState_descriptor_, &HardState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfState_descriptor_, &ConfState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfChange_descriptor_, &ConfChange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raftpb_2eproto() {
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete SnapshotMetadata::default_instance_;
  delete SnapshotMetadata_reflection_;
  delete Snapshot::default_instance_;
  delete Snapshot_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete HardState::default_instance_;
  delete HardState_reflection_;
  delete ConfState::default_instance_;
  delete ConfState_reflection_;
  delete ConfChange::default_instance_;
  delete ConfChange_reflection_;
}

void protobuf_AddDesc_raftpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_raftpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014raftpb.proto\022\tyaraft.pb\"V\n\005Entry\022\014\n\004Te"
    "rm\030\002 \001(\004\022\r\n\005Index\030\003 \001(\004\022\"\n\004Type\030\001 \001(\0162\024."
    "yaraft.pb.EntryType\022\014\n\004Data\030\004 \001(\014\"Y\n\020Sna"
    "pshotMetadata\022(\n\nconf_state\030\001 \001(\0132\024.yara"
    "ft.pb.ConfState\022\r\n\005index\030\002 \001(\004\022\014\n\004term\030\003"
    " \001(\004\"G\n\010Snapshot\022\014\n\004data\030\001 \001(\014\022-\n\010metada"
    "ta\030\002 \001(\0132\033.yaraft.pb.SnapshotMetadata\"\206\002"
    "\n\007Message\022$\n\004type\030\001 \001(\0162\026.yaraft.pb.Mess"
    "ageType\022\n\n\002to\030\002 \001(\004\022\014\n\004from\030\003 \001(\004\022\014\n\004ter"
    "m\030\004 \001(\004\022\017\n\007logTerm\030\005 \001(\004\022\r\n\005index\030\006 \001(\004\022"
    "!\n\007entries\030\007 \003(\0132\020.yaraft.pb.Entry\022\016\n\006co"
    "mmit\030\010 \001(\004\022%\n\010snapshot\030\t \001(\0132\023.yaraft.pb"
    ".Snapshot\022\016\n\006reject\030\n \001(\010\022\022\n\nrejectHint\030"
    "\013 \001(\004\022\017\n\007context\030\014 \001(\014\"7\n\tHardState\022\014\n\004t"
    "erm\030\001 \001(\004\022\014\n\004vote\030\002 \001(\004\022\016\n\006commit\030\003 \001(\004\""
    "\032\n\tConfState\022\r\n\005nodes\030\001 \003(\004\"b\n\nConfChang"
    "e\022\n\n\002ID\030\001 \001(\004\022\'\n\004Type\030\002 \001(\0162\031.yaraft.pb."
    "ConfChangeType\022\016\n\006NodeID\030\003 \001(\004\022\017\n\007Contex"
    "t\030\004 \001(\014*1\n\tEntryType\022\017\n\013EntryNormal\020\000\022\023\n"
    "\017EntryConfChange\020\001*\323\002\n\013MessageType\022\n\n\006Ms"
    "gHup\020\000\022\013\n\007MsgBeat\020\001\022\013\n\007MsgProp\020\002\022\n\n\006MsgA"
    "pp\020\003\022\016\n\nMsgAppResp\020\004\022\013\n\007MsgVote\020\005\022\017\n\013Msg"
    "VoteResp\020\006\022\013\n\007MsgSnap\020\007\022\020\n\014MsgHeartbeat\020"
    "\010\022\024\n\020MsgHeartbeatResp\020\t\022\022\n\016MsgUnreachabl"
    "e\020\n\022\021\n\rMsgSnapStatus\020\013\022\022\n\016MsgCheckQuorum"
    "\020\014\022\025\n\021MsgTransferLeader\020\r\022\021\n\rMsgTimeoutN"
    "ow\020\016\022\020\n\014MsgReadIndex\020\017\022\024\n\020MsgReadIndexRe"
    "sp\020\020\022\016\n\nMsgPreVote\020\021\022\022\n\016MsgPreVoteResp\020\022"
    "*[\n\016ConfChangeType\022\025\n\021ConfChangeAddNode\020"
    "\000\022\030\n\024ConfChangeRemoveNode\020\001\022\030\n\024ConfChang"
    "eUpdateNode\020\002", 1213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raftpb.proto", &protobuf_RegisterTypes);
  Entry::default_instance_ = new Entry();
  SnapshotMetadata::default_instance_ = new SnapshotMetadata();
  Snapshot::default_instance_ = new Snapshot();
  Message::default_instance_ = new Message();
  HardState::default_instance_ = new HardState();
  ConfState::default_instance_ = new ConfState();
  ConfChange::default_instance_ = new ConfChange();
  Entry::default_instance_->InitAsDefaultInstance();
  SnapshotMetadata::default_instance_->InitAsDefaultInstance();
  Snapshot::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  HardState::default_instance_->InitAsDefaultInstance();
  ConfState::default_instance_->InitAsDefaultInstance();
  ConfChange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raftpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raftpb_2eproto {
  StaticDescriptorInitializer_raftpb_2eproto() {
    protobuf_AddDesc_raftpb_2eproto();
  }
} static_descriptor_initializer_raftpb_2eproto_;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryType_descriptor_;
}
bool EntryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfChangeType_descriptor_;
}
bool ConfChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kTermFieldNumber;
const int Entry::kIndexFieldNumber;
const int Entry::kTypeFieldNumber;
const int Entry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yaraft.pb.Entry)
}

void Entry::InitAsDefaultInstance() {
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yaraft.pb.Entry)
}

void Entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:yaraft.pb.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raftpb_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New(::google::protobuf::Arena* arena) const {
  Entry* n = new Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:yaraft.pb.Entry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Entry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Entry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(term_, index_);
    type_ = 0;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yaraft.pb.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yaraft.pb.EntryType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::yaraft::pb::EntryType_IsValid(value)) {
            set_type(static_cast< ::yaraft::pb::EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Term;
        break;
      }

      // optional uint64 Term = 2;
      case 2: {
        if (tag == 16) {
         parse_Term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Index;
        break;
      }

      // optional uint64 Index = 3;
      case 3: {
        if (tag == 24) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Data;
        break;
      }

      // optional bytes Data = 4;
      case 4: {
        if (tag == 34) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yaraft.pb.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yaraft.pb.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yaraft.pb.Entry)
  // optional .yaraft.pb.EntryType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 Term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // optional uint64 Index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
  }

  // optional bytes Data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yaraft.pb.Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yaraft.pb.Entry)
  // optional .yaraft.pb.EntryType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 Term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // optional uint64 Index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
  }

  // optional bytes Data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yaraft.pb.Entry)
  return target;
}

int Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:yaraft.pb.Entry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 Term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 Index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional .yaraft.pb.EntryType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes Data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yaraft.pb.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yaraft.pb.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yaraft.pb.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yaraft.pb.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yaraft.pb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yaraft.pb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {

  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  std::swap(term_, other->term_);
  std::swap(index_, other->index_);
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry

// optional uint64 Term = 2;
bool Entry::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entry::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
void Entry::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Entry.Term)
  return term_;
}
 void Entry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Entry.Term)
}

// optional uint64 Index = 3;
bool Entry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void Entry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Entry.Index)
  return index_;
}
 void Entry::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Entry.Index)
}

// optional .yaraft.pb.EntryType Type = 1;
bool Entry::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Entry::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Entry::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Entry::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::yaraft::pb::EntryType Entry::type() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Entry.Type)
  return static_cast< ::yaraft::pb::EntryType >(type_);
}
 void Entry::set_type(::yaraft::pb::EntryType value) {
  assert(::yaraft::pb::EntryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Entry.Type)
}

// optional bytes Data = 4;
bool Entry::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Entry::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Entry::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Entry.Data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yaraft.pb.Entry.Data)
}
 void Entry::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yaraft.pb.Entry.Data)
}
 void Entry::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yaraft.pb.Entry.Data)
}
 ::std::string* Entry::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:yaraft.pb.Entry.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:yaraft.pb.Entry.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:yaraft.pb.Entry.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotMetadata::kConfStateFieldNumber;
const int SnapshotMetadata::kIndexFieldNumber;
const int SnapshotMetadata::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotMetadata::SnapshotMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yaraft.pb.SnapshotMetadata)
}

void SnapshotMetadata::InitAsDefaultInstance() {
  conf_state_ = const_cast< ::yaraft::pb::ConfState*>(&::yaraft::pb::ConfState::default_instance());
}

SnapshotMetadata::SnapshotMetadata(const SnapshotMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yaraft.pb.SnapshotMetadata)
}

void SnapshotMetadata::SharedCtor() {
  _cached_size_ = 0;
  conf_state_ = NULL;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotMetadata::~SnapshotMetadata() {
  // @@protoc_insertion_point(destructor:yaraft.pb.SnapshotMetadata)
  SharedDtor();
}

void SnapshotMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete conf_state_;
  }
}

void SnapshotMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotMetadata_descriptor_;
}

const SnapshotMetadata& SnapshotMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raftpb_2eproto();
  return *default_instance_;
}

SnapshotMetadata* SnapshotMetadata::default_instance_ = NULL;

SnapshotMetadata* SnapshotMetadata::New(::google::protobuf::Arena* arena) const {
  SnapshotMetadata* n = new SnapshotMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:yaraft.pb.SnapshotMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SnapshotMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SnapshotMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(index_, term_);
    if (has_conf_state()) {
      if (conf_state_ != NULL) conf_state_->::yaraft::pb::ConfState::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SnapshotMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yaraft.pb.SnapshotMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yaraft.pb.ConfState conf_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional uint64 term = 3;
      case 3: {
        if (tag == 24) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yaraft.pb.SnapshotMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yaraft.pb.SnapshotMetadata)
  return false;
#undef DO_
}

void SnapshotMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yaraft.pb.SnapshotMetadata)
  // optional .yaraft.pb.ConfState conf_state = 1;
  if (has_conf_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conf_state_, output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yaraft.pb.SnapshotMetadata)
}

::google::protobuf::uint8* SnapshotMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yaraft.pb.SnapshotMetadata)
  // optional .yaraft.pb.ConfState conf_state = 1;
  if (has_conf_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conf_state_, false, target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yaraft.pb.SnapshotMetadata)
  return target;
}

int SnapshotMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:yaraft.pb.SnapshotMetadata)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .yaraft.pb.ConfState conf_state = 1;
    if (has_conf_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conf_state_);
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yaraft.pb.SnapshotMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SnapshotMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yaraft.pb.SnapshotMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yaraft.pb.SnapshotMetadata)
    MergeFrom(*source);
  }
}

void SnapshotMetadata::MergeFrom(const SnapshotMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yaraft.pb.SnapshotMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conf_state()) {
      mutable_conf_state()->::yaraft::pb::ConfState::MergeFrom(from.conf_state());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SnapshotMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yaraft.pb.SnapshotMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotMetadata::CopyFrom(const SnapshotMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yaraft.pb.SnapshotMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotMetadata::IsInitialized() const {

  return true;
}

void SnapshotMetadata::Swap(SnapshotMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotMetadata::InternalSwap(SnapshotMetadata* other) {
  std::swap(conf_state_, other->conf_state_);
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotMetadata_descriptor_;
  metadata.reflection = SnapshotMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotMetadata

// optional .yaraft.pb.ConfState conf_state = 1;
bool SnapshotMetadata::has_conf_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnapshotMetadata::set_has_conf_state() {
  _has_bits_[0] |= 0x00000001u;
}
void SnapshotMetadata::clear_has_conf_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnapshotMetadata::clear_conf_state() {
  if (conf_state_ != NULL) conf_state_->::yaraft::pb::ConfState::Clear();
  clear_has_conf_state();
}
const ::yaraft::pb::ConfState& SnapshotMetadata::conf_state() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.SnapshotMetadata.conf_state)
  return conf_state_ != NULL ? *conf_state_ : *default_instance_->conf_state_;
}
::yaraft::pb::ConfState* SnapshotMetadata::mutable_conf_state() {
  set_has_conf_state();
  if (conf_state_ == NULL) {
    conf_state_ = new ::yaraft::pb::ConfState;
  }
  // @@protoc_insertion_point(field_mutable:yaraft.pb.SnapshotMetadata.conf_state)
  return conf_state_;
}
::yaraft::pb::ConfState* SnapshotMetadata::release_conf_state() {
  // @@protoc_insertion_point(field_release:yaraft.pb.SnapshotMetadata.conf_state)
  clear_has_conf_state();
  ::yaraft::pb::ConfState* temp = conf_state_;
  conf_state_ = NULL;
  return temp;
}
void SnapshotMetadata::set_allocated_conf_state(::yaraft::pb::ConfState* conf_state) {
  delete conf_state_;
  conf_state_ = conf_state;
  if (conf_state) {
    set_has_conf_state();
  } else {
    clear_has_conf_state();
  }
  // @@protoc_insertion_point(field_set_allocated:yaraft.pb.SnapshotMetadata.conf_state)
}

// optional uint64 index = 2;
bool SnapshotMetadata::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnapshotMetadata::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void SnapshotMetadata::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnapshotMetadata::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 SnapshotMetadata::index() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.SnapshotMetadata.index)
  return index_;
}
 void SnapshotMetadata::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.SnapshotMetadata.index)
}

// optional uint64 term = 3;
bool SnapshotMetadata::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnapshotMetadata::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
void SnapshotMetadata::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnapshotMetadata::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 SnapshotMetadata::term() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.SnapshotMetadata.term)
  return term_;
}
 void SnapshotMetadata::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.SnapshotMetadata.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kDataFieldNumber;
const int Snapshot::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yaraft.pb.Snapshot)
}

void Snapshot::InitAsDefaultInstance() {
  metadata_ = const_cast< ::yaraft::pb::SnapshotMetadata*>(&::yaraft::pb::SnapshotMetadata::default_instance());
}

Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yaraft.pb.Snapshot)
}

void Snapshot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:yaraft.pb.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Snapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snapshot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snapshot_descriptor_;
}

const Snapshot& Snapshot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raftpb_2eproto();
  return *default_instance_;
}

Snapshot* Snapshot::default_instance_ = NULL;

Snapshot* Snapshot::New(::google::protobuf::Arena* arena) const {
  Snapshot* n = new Snapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:yaraft.pb.Snapshot)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::yaraft::pb::SnapshotMetadata::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yaraft.pb.Snapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }

      // optional .yaraft.pb.SnapshotMetadata metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yaraft.pb.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yaraft.pb.Snapshot)
  return false;
#undef DO_
}

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yaraft.pb.Snapshot)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional .yaraft.pb.SnapshotMetadata metadata = 2;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yaraft.pb.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yaraft.pb.Snapshot)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional .yaraft.pb.SnapshotMetadata metadata = 2;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metadata_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yaraft.pb.Snapshot)
  return target;
}

int Snapshot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:yaraft.pb.Snapshot)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .yaraft.pb.SnapshotMetadata metadata = 2;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metadata_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yaraft.pb.Snapshot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Snapshot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Snapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yaraft.pb.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yaraft.pb.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yaraft.pb.Snapshot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_metadata()) {
      mutable_metadata()->::yaraft::pb::SnapshotMetadata::MergeFrom(from.metadata());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yaraft.pb.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yaraft.pb.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {

  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  data_.Swap(&other->data_);
  std::swap(metadata_, other->metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snapshot_descriptor_;
  metadata.reflection = Snapshot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Snapshot

// optional bytes data = 1;
bool Snapshot::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Snapshot::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Snapshot::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Snapshot::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& Snapshot::data() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Snapshot.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Snapshot::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yaraft.pb.Snapshot.data)
}
 void Snapshot::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yaraft.pb.Snapshot.data)
}
 void Snapshot::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yaraft.pb.Snapshot.data)
}
 ::std::string* Snapshot::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:yaraft.pb.Snapshot.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Snapshot::release_data() {
  // @@protoc_insertion_point(field_release:yaraft.pb.Snapshot.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Snapshot::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:yaraft.pb.Snapshot.data)
}

// optional .yaraft.pb.SnapshotMetadata metadata = 2;
bool Snapshot::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Snapshot::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void Snapshot::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void Snapshot::clear_metadata() {
  if (metadata_ != NULL) metadata_->::yaraft::pb::SnapshotMetadata::Clear();
  clear_has_metadata();
}
const ::yaraft::pb::SnapshotMetadata& Snapshot::metadata() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Snapshot.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::yaraft::pb::SnapshotMetadata* Snapshot::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    metadata_ = new ::yaraft::pb::SnapshotMetadata;
  }
  // @@protoc_insertion_point(field_mutable:yaraft.pb.Snapshot.metadata)
  return metadata_;
}
::yaraft::pb::SnapshotMetadata* Snapshot::release_metadata() {
  // @@protoc_insertion_point(field_release:yaraft.pb.Snapshot.metadata)
  clear_has_metadata();
  ::yaraft::pb::SnapshotMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Snapshot::set_allocated_metadata(::yaraft::pb::SnapshotMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:yaraft.pb.Snapshot.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kToFieldNumber;
const int Message::kFromFieldNumber;
const int Message::kTermFieldNumber;
const int Message::kLogTermFieldNumber;
const int Message::kIndexFieldNumber;
const int Message::kEntriesFieldNumber;
const int Message::kCommitFieldNumber;
const int Message::kSnapshotFieldNumber;
const int Message::kRejectFieldNumber;
const int Message::kRejectHintFieldNumber;
const int Message::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yaraft.pb.Message)
}

void Message::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::yaraft::pb::Snapshot*>(&::yaraft::pb::Snapshot::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yaraft.pb.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  to_ = GOOGLE_ULONGLONG(0);
  from_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  logterm_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  commit_ = GOOGLE_ULONGLONG(0);
  snapshot_ = NULL;
  reject_ = false;
  rejecthint_ = GOOGLE_ULONGLONG(0);
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:yaraft.pb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raftpb_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:yaraft.pb.Message)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Message, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Message*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(to_, type_);
    index_ = GOOGLE_ULONGLONG(0);
    commit_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::yaraft::pb::Snapshot::Clear();
    }
    reject_ = false;
    rejecthint_ = GOOGLE_ULONGLONG(0);
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yaraft.pb.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yaraft.pb.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::yaraft::pb::MessageType_IsValid(value)) {
            set_type(static_cast< ::yaraft::pb::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // optional uint64 to = 2;
      case 2: {
        if (tag == 16) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from;
        break;
      }

      // optional uint64 from = 3;
      case 3: {
        if (tag == 24) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_term;
        break;
      }

      // optional uint64 term = 4;
      case 4: {
        if (tag == 32) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_logTerm;
        break;
      }

      // optional uint64 logTerm = 5;
      case 5: {
        if (tag == 40) {
         parse_logTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logterm_)));
          set_has_logterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // optional uint64 index = 6;
      case 6: {
        if (tag == 48) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .yaraft.pb.Entry entries = 7;
      case 7: {
        if (tag == 58) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_commit;
        break;
      }

      // optional uint64 commit = 8;
      case 8: {
        if (tag == 64) {
         parse_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
          set_has_commit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_snapshot;
        break;
      }

      // optional .yaraft.pb.Snapshot snapshot = 9;
      case 9: {
        if (tag == 74) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reject;
        break;
      }

      // optional bool reject = 10;
      case 10: {
        if (tag == 80) {
         parse_reject:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reject_)));
          set_has_reject();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_rejectHint;
        break;
      }

      // optional uint64 rejectHint = 11;
      case 11: {
        if (tag == 88) {
         parse_rejectHint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rejecthint_)));
          set_has_rejecthint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_context;
        break;
      }

      // optional bytes context = 12;
      case 12: {
        if (tag == 98) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yaraft.pb.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yaraft.pb.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yaraft.pb.Message)
  // optional .yaraft.pb.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to(), output);
  }

  // optional uint64 from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from(), output);
  }

  // optional uint64 term = 4;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->term(), output);
  }

  // optional uint64 logTerm = 5;
  if (has_logterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logterm(), output);
  }

  // optional uint64 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->index(), output);
  }

  // repeated .yaraft.pb.Entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  // optional uint64 commit = 8;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->commit(), output);
  }

  // optional .yaraft.pb.Snapshot snapshot = 9;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->snapshot_, output);
  }

  // optional bool reject = 10;
  if (has_reject()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reject(), output);
  }

  // optional uint64 rejectHint = 11;
  if (has_rejecthint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->rejecthint(), output);
  }

  // optional bytes context = 12;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->context(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yaraft.pb.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yaraft.pb.Message)
  // optional .yaraft.pb.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to(), target);
  }

  // optional uint64 from = 3;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from(), target);
  }

  // optional uint64 term = 4;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->term(), target);
  }

  // optional uint64 logTerm = 5;
  if (has_logterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logterm(), target);
  }

  // optional uint64 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->index(), target);
  }

  // repeated .yaraft.pb.Entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->entries(i), false, target);
  }

  // optional uint64 commit = 8;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->commit(), target);
  }

  // optional .yaraft.pb.Snapshot snapshot = 9;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->snapshot_, false, target);
  }

  // optional bool reject = 10;
  if (has_reject()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reject(), target);
  }

  // optional uint64 rejectHint = 11;
  if (has_rejecthint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->rejecthint(), target);
  }

  // optional bytes context = 12;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->context(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yaraft.pb.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:yaraft.pb.Message)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional .yaraft.pb.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to());
    }

    // optional uint64 from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from());
    }

    // optional uint64 term = 4;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 logTerm = 5;
    if (has_logterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logterm());
    }

    // optional uint64 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 commit = 8;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .yaraft.pb.Snapshot snapshot = 9;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snapshot_);
    }

    // optional bool reject = 10;
    if (has_reject()) {
      total_size += 1 + 1;
    }

    // optional uint64 rejectHint = 11;
    if (has_rejecthint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rejecthint());
    }

    // optional bytes context = 12;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

  }
  // repeated .yaraft.pb.Entry entries = 7;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yaraft.pb.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yaraft.pb.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yaraft.pb.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yaraft.pb.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_logterm()) {
      set_logterm(from.logterm());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::yaraft::pb::Snapshot::MergeFrom(from.snapshot());
    }
    if (from.has_reject()) {
      set_reject(from.reject());
    }
    if (from.has_rejecthint()) {
      set_rejecthint(from.rejecthint());
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yaraft.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yaraft.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  std::swap(to_, other->to_);
  std::swap(from_, other->from_);
  std::swap(term_, other->term_);
  std::swap(logterm_, other->logterm_);
  std::swap(index_, other->index_);
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(commit_, other->commit_);
  std::swap(snapshot_, other->snapshot_);
  std::swap(reject_, other->reject_);
  std::swap(rejecthint_, other->rejecthint_);
  context_.Swap(&other->context_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .yaraft.pb.MessageType type = 1;
bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::yaraft::pb::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.type)
  return static_cast< ::yaraft::pb::MessageType >(type_);
}
 void Message::set_type(::yaraft::pb::MessageType value) {
  assert(::yaraft::pb::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.type)
}

// optional uint64 to = 2;
bool Message::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
  clear_has_to();
}
 ::google::protobuf::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.to)
  return to_;
}
 void Message::set_to(::google::protobuf::uint64 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.to)
}

// optional uint64 from = 3;
bool Message::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
  clear_has_from();
}
 ::google::protobuf::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.from)
  return from_;
}
 void Message::set_from(::google::protobuf::uint64 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.from)
}

// optional uint64 term = 4;
bool Message::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.term)
  return term_;
}
 void Message::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.term)
}

// optional uint64 logTerm = 5;
bool Message::has_logterm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Message::set_has_logterm() {
  _has_bits_[0] |= 0x00000010u;
}
void Message::clear_has_logterm() {
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_logterm() {
  logterm_ = GOOGLE_ULONGLONG(0);
  clear_has_logterm();
}
 ::google::protobuf::uint64 Message::logterm() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.logTerm)
  return logterm_;
}
 void Message::set_logterm(::google::protobuf::uint64 value) {
  set_has_logterm();
  logterm_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.logTerm)
}

// optional uint64 index = 6;
bool Message::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Message::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
void Message::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void Message::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 Message::index() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.index)
  return index_;
}
 void Message::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.index)
}

// repeated .yaraft.pb.Entry entries = 7;
int Message::entries_size() const {
  return entries_.size();
}
void Message::clear_entries() {
  entries_.Clear();
}
const ::yaraft::pb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.entries)
  return entries_.Get(index);
}
::yaraft::pb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:yaraft.pb.Message.entries)
  return entries_.Mutable(index);
}
::yaraft::pb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:yaraft.pb.Message.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::yaraft::pb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:yaraft.pb.Message.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::yaraft::pb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:yaraft.pb.Message.entries)
  return entries_;
}

// optional uint64 commit = 8;
bool Message::has_commit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Message::set_has_commit() {
  _has_bits_[0] |= 0x00000080u;
}
void Message::clear_has_commit() {
  _has_bits_[0] &= ~0x00000080u;
}
void Message::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
  clear_has_commit();
}
 ::google::protobuf::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.commit)
  return commit_;
}
 void Message::set_commit(::google::protobuf::uint64 value) {
  set_has_commit();
  commit_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.commit)
}

// optional .yaraft.pb.Snapshot snapshot = 9;
bool Message::has_snapshot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Message::set_has_snapshot() {
  _has_bits_[0] |= 0x00000100u;
}
void Message::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000100u;
}
void Message::clear_snapshot() {
  if (snapshot_ != NULL) snapshot_->::yaraft::pb::Snapshot::Clear();
  clear_has_snapshot();
}
const ::yaraft::pb::Snapshot& Message::snapshot() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.snapshot)
  return snapshot_ != NULL ? *snapshot_ : *default_instance_->snapshot_;
}
::yaraft::pb::Snapshot* Message::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == NULL) {
    snapshot_ = new ::yaraft::pb::Snapshot;
  }
  // @@protoc_insertion_point(field_mutable:yaraft.pb.Message.snapshot)
  return snapshot_;
}
::yaraft::pb::Snapshot* Message::release_snapshot() {
  // @@protoc_insertion_point(field_release:yaraft.pb.Message.snapshot)
  clear_has_snapshot();
  ::yaraft::pb::Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
void Message::set_allocated_snapshot(::yaraft::pb::Snapshot* snapshot) {
  delete snapshot_;
  snapshot_ = snapshot;
  if (snapshot) {
    set_has_snapshot();
  } else {
    clear_has_snapshot();
  }
  // @@protoc_insertion_point(field_set_allocated:yaraft.pb.Message.snapshot)
}

// optional bool reject = 10;
bool Message::has_reject() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Message::set_has_reject() {
  _has_bits_[0] |= 0x00000200u;
}
void Message::clear_has_reject() {
  _has_bits_[0] &= ~0x00000200u;
}
void Message::clear_reject() {
  reject_ = false;
  clear_has_reject();
}
 bool Message::reject() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.reject)
  return reject_;
}
 void Message::set_reject(bool value) {
  set_has_reject();
  reject_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.reject)
}

// optional uint64 rejectHint = 11;
bool Message::has_rejecthint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Message::set_has_rejecthint() {
  _has_bits_[0] |= 0x00000400u;
}
void Message::clear_has_rejecthint() {
  _has_bits_[0] &= ~0x00000400u;
}
void Message::clear_rejecthint() {
  rejecthint_ = GOOGLE_ULONGLONG(0);
  clear_has_rejecthint();
}
 ::google::protobuf::uint64 Message::rejecthint() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.rejectHint)
  return rejecthint_;
}
 void Message::set_rejecthint(::google::protobuf::uint64 value) {
  set_has_rejecthint();
  rejecthint_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.rejectHint)
}

// optional bytes context = 12;
bool Message::has_context() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Message::set_has_context() {
  _has_bits_[0] |= 0x00000800u;
}
void Message::clear_has_context() {
  _has_bits_[0] &= ~0x00000800u;
}
void Message::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& Message::context() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.Message.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yaraft.pb.Message.context)
}
 void Message::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yaraft.pb.Message.context)
}
 void Message::set_context(const void* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yaraft.pb.Message.context)
}
 ::std::string* Message::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:yaraft.pb.Message.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_context() {
  // @@protoc_insertion_point(field_release:yaraft.pb.Message.context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:yaraft.pb.Message.context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardState::kTermFieldNumber;
const int HardState::kVoteFieldNumber;
const int HardState::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardState::HardState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yaraft.pb.HardState)
}

void HardState::InitAsDefaultInstance() {
}

HardState::HardState(const HardState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yaraft.pb.HardState)
}

void HardState::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  vote_ = GOOGLE_ULONGLONG(0);
  commit_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HardState::~HardState() {
  // @@protoc_insertion_point(destructor:yaraft.pb.HardState)
  SharedDtor();
}

void HardState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HardState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardState_descriptor_;
}

const HardState& HardState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raftpb_2eproto();
  return *default_instance_;
}

HardState* HardState::default_instance_ = NULL;

HardState* HardState::New(::google::protobuf::Arena* arena) const {
  HardState* n = new HardState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardState::Clear() {
// @@protoc_insertion_point(message_clear_start:yaraft.pb.HardState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HardState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HardState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, commit_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HardState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yaraft.pb.HardState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vote;
        break;
      }

      // optional uint64 vote = 2;
      case 2: {
        if (tag == 16) {
         parse_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vote_)));
          set_has_vote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit;
        break;
      }

      // optional uint64 commit = 3;
      case 3: {
        if (tag == 24) {
         parse_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
          set_has_commit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yaraft.pb.HardState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yaraft.pb.HardState)
  return false;
#undef DO_
}

void HardState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yaraft.pb.HardState)
  // optional uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional uint64 vote = 2;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->vote(), output);
  }

  // optional uint64 commit = 3;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yaraft.pb.HardState)
}

::google::protobuf::uint8* HardState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yaraft.pb.HardState)
  // optional uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional uint64 vote = 2;
  if (has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->vote(), target);
  }

  // optional uint64 commit = 3;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yaraft.pb.HardState)
  return target;
}

int HardState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:yaraft.pb.HardState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 vote = 2;
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vote());
    }

    // optional uint64 commit = 3;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yaraft.pb.HardState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HardState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HardState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yaraft.pb.HardState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yaraft.pb.HardState)
    MergeFrom(*source);
  }
}

void HardState::MergeFrom(const HardState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yaraft.pb.HardState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_vote()) {
      set_vote(from.vote());
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HardState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yaraft.pb.HardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardState::CopyFrom(const HardState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yaraft.pb.HardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardState::IsInitialized() const {

  return true;
}

void HardState::Swap(HardState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardState::InternalSwap(HardState* other) {
  std::swap(term_, other->term_);
  std::swap(vote_, other->vote_);
  std::swap(commit_, other->commit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardState_descriptor_;
  metadata.reflection = HardState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardState

// optional uint64 term = 1;
bool HardState::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HardState::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
void HardState::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
void HardState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 HardState::term() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.HardState.term)
  return term_;
}
 void HardState::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.HardState.term)
}

// optional uint64 vote = 2;
bool HardState::has_vote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HardState::set_has_vote() {
  _has_bits_[0] |= 0x00000002u;
}
void HardState::clear_has_vote() {
  _has_bits_[0] &= ~0x00000002u;
}
void HardState::clear_vote() {
  vote_ = GOOGLE_ULONGLONG(0);
  clear_has_vote();
}
 ::google::protobuf::uint64 HardState::vote() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.HardState.vote)
  return vote_;
}
 void HardState::set_vote(::google::protobuf::uint64 value) {
  set_has_vote();
  vote_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.HardState.vote)
}

// optional uint64 commit = 3;
bool HardState::has_commit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HardState::set_has_commit() {
  _has_bits_[0] |= 0x00000004u;
}
void HardState::clear_has_commit() {
  _has_bits_[0] &= ~0x00000004u;
}
void HardState::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
  clear_has_commit();
}
 ::google::protobuf::uint64 HardState::commit() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.HardState.commit)
  return commit_;
}
 void HardState::set_commit(::google::protobuf::uint64 value) {
  set_has_commit();
  commit_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.HardState.commit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfState::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfState::ConfState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yaraft.pb.ConfState)
}

void ConfState::InitAsDefaultInstance() {
}

ConfState::ConfState(const ConfState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yaraft.pb.ConfState)
}

void ConfState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfState::~ConfState() {
  // @@protoc_insertion_point(destructor:yaraft.pb.ConfState)
  SharedDtor();
}

void ConfState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfState_descriptor_;
}

const ConfState& ConfState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raftpb_2eproto();
  return *default_instance_;
}

ConfState* ConfState::default_instance_ = NULL;

ConfState* ConfState::New(::google::protobuf::Arena* arena) const {
  ConfState* n = new ConfState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfState::Clear() {
// @@protoc_insertion_point(message_clear_start:yaraft.pb.ConfState)
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yaraft.pb.ConfState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 nodes = 1;
      case 1: {
        if (tag == 8) {
         parse_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_nodes())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yaraft.pb.ConfState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yaraft.pb.ConfState)
  return false;
#undef DO_
}

void ConfState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yaraft.pb.ConfState)
  // repeated uint64 nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yaraft.pb.ConfState)
}

::google::protobuf::uint8* ConfState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yaraft.pb.ConfState)
  // repeated uint64 nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->nodes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yaraft.pb.ConfState)
  return target;
}

int ConfState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:yaraft.pb.ConfState)
  int total_size = 0;

  // repeated uint64 nodes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->nodes(i));
    }
    total_size += 1 * this->nodes_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yaraft.pb.ConfState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yaraft.pb.ConfState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yaraft.pb.ConfState)
    MergeFrom(*source);
  }
}

void ConfState::MergeFrom(const ConfState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yaraft.pb.ConfState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yaraft.pb.ConfState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfState::CopyFrom(const ConfState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yaraft.pb.ConfState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfState::IsInitialized() const {

  return true;
}

void ConfState::Swap(ConfState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfState::InternalSwap(ConfState* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfState_descriptor_;
  metadata.reflection = ConfState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfState

// repeated uint64 nodes = 1;
int ConfState::nodes_size() const {
  return nodes_.size();
}
void ConfState::clear_nodes() {
  nodes_.Clear();
}
 ::google::protobuf::uint64 ConfState::nodes(int index) const {
  // @@protoc_insertion_point(field_get:yaraft.pb.ConfState.nodes)
  return nodes_.Get(index);
}
 void ConfState::set_nodes(int index, ::google::protobuf::uint64 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:yaraft.pb.ConfState.nodes)
}
 void ConfState::add_nodes(::google::protobuf::uint64 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:yaraft.pb.ConfState.nodes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ConfState::nodes() const {
  // @@protoc_insertion_point(field_list:yaraft.pb.ConfState.nodes)
  return nodes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ConfState::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:yaraft.pb.ConfState.nodes)
  return &nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfChange::kIDFieldNumber;
const int ConfChange::kTypeFieldNumber;
const int ConfChange::kNodeIDFieldNumber;
const int ConfChange::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfChange::ConfChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yaraft.pb.ConfChange)
}

void ConfChange::InitAsDefaultInstance() {
}

ConfChange::ConfChange(const ConfChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yaraft.pb.ConfChange)
}

void ConfChange::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  nodeid_ = GOOGLE_ULONGLONG(0);
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfChange::~ConfChange() {
  // @@protoc_insertion_point(destructor:yaraft.pb.ConfChange)
  SharedDtor();
}

void ConfChange::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConfChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfChange_descriptor_;
}

const ConfChange& ConfChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raftpb_2eproto();
  return *default_instance_;
}

ConfChange* ConfChange::default_instance_ = NULL;

ConfChange* ConfChange::New(::google::protobuf::Arena* arena) const {
  ConfChange* n = new ConfChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfChange::Clear() {
// @@protoc_insertion_point(message_clear_start:yaraft.pb.ConfChange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfChange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfChange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(id_, nodeid_);
    type_ = 0;
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yaraft.pb.ConfChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .yaraft.pb.ConfChangeType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::yaraft::pb::ConfChangeType_IsValid(value)) {
            set_type(static_cast< ::yaraft::pb::ConfChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NodeID;
        break;
      }

      // optional uint64 NodeID = 3;
      case 3: {
        if (tag == 24) {
         parse_NodeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Context;
        break;
      }

      // optional bytes Context = 4;
      case 4: {
        if (tag == 34) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yaraft.pb.ConfChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yaraft.pb.ConfChange)
  return false;
#undef DO_
}

void ConfChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yaraft.pb.ConfChange)
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .yaraft.pb.ConfChangeType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 NodeID = 3;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nodeid(), output);
  }

  // optional bytes Context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->context(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yaraft.pb.ConfChange)
}

::google::protobuf::uint8* ConfChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yaraft.pb.ConfChange)
  // optional uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .yaraft.pb.ConfChangeType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 NodeID = 3;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nodeid(), target);
  }

  // optional bytes Context = 4;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->context(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yaraft.pb.ConfChange)
  return target;
}

int ConfChange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:yaraft.pb.ConfChange)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .yaraft.pb.ConfChangeType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 NodeID = 3;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nodeid());
    }

    // optional bytes Context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yaraft.pb.ConfChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfChange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yaraft.pb.ConfChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yaraft.pb.ConfChange)
    MergeFrom(*source);
  }
}

void ConfChange::MergeFrom(const ConfChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yaraft.pb.ConfChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yaraft.pb.ConfChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfChange::CopyFrom(const ConfChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yaraft.pb.ConfChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfChange::IsInitialized() const {

  return true;
}

void ConfChange::Swap(ConfChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfChange::InternalSwap(ConfChange* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(nodeid_, other->nodeid_);
  context_.Swap(&other->context_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfChange_descriptor_;
  metadata.reflection = ConfChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfChange

// optional uint64 ID = 1;
bool ConfChange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfChange::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfChange::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfChange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 ConfChange::id() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.ConfChange.ID)
  return id_;
}
 void ConfChange::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.ConfChange.ID)
}

// optional .yaraft.pb.ConfChangeType Type = 2;
bool ConfChange::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfChange::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfChange::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfChange::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::yaraft::pb::ConfChangeType ConfChange::type() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.ConfChange.Type)
  return static_cast< ::yaraft::pb::ConfChangeType >(type_);
}
 void ConfChange::set_type(::yaraft::pb::ConfChangeType value) {
  assert(::yaraft::pb::ConfChangeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.ConfChange.Type)
}

// optional uint64 NodeID = 3;
bool ConfChange::has_nodeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfChange::set_has_nodeid() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfChange::clear_has_nodeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfChange::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
  clear_has_nodeid();
}
 ::google::protobuf::uint64 ConfChange::nodeid() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.ConfChange.NodeID)
  return nodeid_;
}
 void ConfChange::set_nodeid(::google::protobuf::uint64 value) {
  set_has_nodeid();
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:yaraft.pb.ConfChange.NodeID)
}

// optional bytes Context = 4;
bool ConfChange::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfChange::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfChange::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfChange::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& ConfChange::context() const {
  // @@protoc_insertion_point(field_get:yaraft.pb.ConfChange.Context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfChange::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yaraft.pb.ConfChange.Context)
}
 void ConfChange::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yaraft.pb.ConfChange.Context)
}
 void ConfChange::set_context(const void* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yaraft.pb.ConfChange.Context)
}
 ::std::string* ConfChange::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:yaraft.pb.ConfChange.Context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfChange::release_context() {
  // @@protoc_insertion_point(field_release:yaraft.pb.ConfChange.Context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfChange::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:yaraft.pb.ConfChange.Context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace yaraft

// @@protoc_insertion_point(global_scope)
